# Thanks to for the reference https://github.com/rceraline/devops/blob/main/2023-12-aks-argocd-pipeline/Application/azure-pipelines.yml

trigger:
  # Trigger pipeline on commits to main branch
- main

resources:
  repositories:
    - repository: infra-aks-demo
      type: github
      endpoint: nellyk
      name: nellyk/infra-aks-demo
variables:
  - name: artifactName
    value: deployment
  
stages:
- stage: Build_Test
  displayName: Build & Test project
  jobs:
  - job: Build # Build the app and run tests
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    variables:
  # Ubuntu-latest image is used for building and deploying the app
      vmImageName: 'ubuntu-latest'
      buildid: $(Build.BuildId)
    steps:
      - checkout: self
      - checkout: infra-aks-demo
        persistCredentials: true
        clean: true
      - task: Docker@2 # Build and push image to Docker Hub
        displayName: Build and push order-service image to Docker Hub
        inputs:
          containerRegistry: 'dockerRegistryServiceConnection'
          repository: 'nkiboi/order-service'
          command: 'buildAndPush'
          Dockerfile:  $(Build.Repository.LocalPath)/aks-store-demo/order-service/Dockerfile
          buildContext: $(Build.Repository.LocalPath)/aks-store-demo/order-service
          tags: |
                $(Build.BuildId)
                latest
      # - task: Docker@2 # Build and push image to Docker Hub
      #   displayName: Build and push product-service image to Docker Hub
      #   inputs:
      #       containerRegistry: 'dockerRegistryServiceConnection'
      #       repository: 'nkiboi/product-service'
      #       command: 'buildAndPush'
      #       Dockerfile:  'product-service/Dockerfile'
      #       buildContext: 'product-service'
      - task: CopyFiles@2
        displayName: Copy the kustomize files
        inputs:
            sourceFolder: $(Build.Repository.LocalPath)/infra-aks-demo
            contents: "**"
            targetFolder: $(Build.ArtifactStagingDirectory)/infra-aks-demo
            overwrite: true
      # - task: replacetokens@6
      #   displayName: Replace the build files token
      #   inputs:
      #     root: '$(Build.ArtifactStagingDirectory)/infra-aks-demo/base'
      #     sources: |
      #       order-service.yaml
      #       product-service.yaml
      #     tokenPattern: 'custom'
      #     tokenPrefix: '#{'
      #     tokenSuffix: '}#'
      #     addBOM: true
      #     missingVarAction: 'keep'
      #     missingVarLog: 'error'
      #     ifNoFilesFound: 'error'
      - script: |
          sed -i "s|image: docker.io/nkiboi.*|image: docker.io/nkiboi/order-service:$(buildid)|g" $(Build.ArtifactStagingDirectory)/infra-aks-demo/base/order-service.yaml
          sed -i "s|image: docker.io/nkiboi.*|image: docker.io/nkiboi/product-service:$(buildid)|g" $(Build.ArtifactStagingDirectory)/infra-aks-demo/base/product-service.yaml
        displayName: 'Update image tag to $(buildid) in Kubernetes manifest files'
      - publish: $(Build.ArtifactStagingDirectory)/infra-aks-demo/base
        artifact: $(artifactName)
- stage: dev
  jobs:
    - deployment: dev
      environment:
          name: aksdev

      pool:
          vmImage: "ubuntu-latest"
      strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: infra-aks-demo
                  persistCredentials: true
                  clean: true

                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: $(artifactName)
                    path: $(Build.Repository.LocalPath)/infra-aks-demo/base

                - task: PowerShell@2
                  displayName: Commit to Deployment repo
                  inputs:
                    targetType: "inline"
                    workingDirectory: $(Build.Repository.LocalPath)/infra-aks-demo/base
                    script: |
                      git config user.email "3062772+nellyk@users.noreply.github.com"
                      git config user.name "build"
                      git stash
                      git remote update
                      git fetch
                      git checkout --track origin/main
                      git stash pop
                      git add .
                      git commit -m "$(Build.BuildId): dev deployment"
                      git push origin HEAD:main
